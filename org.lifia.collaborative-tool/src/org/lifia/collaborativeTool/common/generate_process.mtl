[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate_process.
 */]
[module generate_process('http://cm/1.0', 'http://www.eclipse.org/uml2/3.0.0/UML')]

[import org::lifia::collaborativeTool::common::generate_collaborative_activity /]
[import org::lifia::collaborativeTool::common::generate_component/]
[import org::lifia::collaborativeTool::files::generate_workspace_view/]
[import org::lifia::collaborativeTool::files::generate_workspace_style /]
[import org::lifia::collaborativeTool::utils::get_workspace_in_collaborative_activity /]

[template public generateProcess(aCollaborativeModel: CollaborativeModel, aCollaborativeProcess : CollaborativeProcess)]
	[for (activity : Activity | aCollaborativeProcess.ownedMember->filter(Activity))]
[comment]		[let aCollaborativeActivity : CollaborativeActivity = activity.ownedNode->filter(InitialNode).outgoing.target.eGet('collaborativeActivity').oclAsType(CollaborativeActivity)->asOrderedSet()->first()][/comment]
[comment]			[let aWorkspace : Workspace = getWorkspaceInCollaborativeActivity(aCollaborativeActivity)]
				[generateWorkspaceView(aCollaborativeModel, aWorkspace, aCollaborativeActivity)/]
				[generateWorkspaceStyle(aWorkspace)/]
				[generateComponent(aWorkspace, aCollaborativeModel)/]
			[/let]
			[generateCollaborativeActivityStyle(aCollaborativeActivity)/]
			[generateComponent(aCollaborativeActivity, aCollaborativeModel)/][/comment]
[comment]			[generateCollaborativeActivityView(aCollaborativeModel, aCollaborativeActivity, aCollaborativeActivity.outgoing)/][/comment]
[comment]			[for (aCollaborativeActivityNode: OclAny | activity.ownedNode->filter(CollaborativeProcessEdge))]
[comment]				[if (aCollaborativeActivityNode.collaborativeActivity = aCollaborativeActivity)][/comment]
					[generateCollaborativeActivityView(aCollaborativeModel, aCollaborativeActivity, aCollaborativeActivityNode)/]
[comment]				[/if][/comment]
			[/for][/comment]
[comment]		[/let][/comment]
[comment]		[for (aActivityEdge : CollaborativeProcessEdge | activity.ownedNode->filter(CollaborativeActivityNode).outgoing.oclAsType(CollaborativeProcessEdge))]
			[for (aActivityNode : ActivityNode | aActivityEdge.target->filter(CollaborativeActivityNode))]
				[let var : CollaborativeActivity = aActivityNode.eGet('collaborativeActivity').oclAsType(CollaborativeActivity)->asOrderedSet()->first()]
					[generateCollaborativeActivityView(aCollaborativeModel, var, aActivityEdge.roleElementOperation.getName())/]
				[/let]
			[/for] 
		[/for][/comment]

[comment]		[let aGeneratedWorkspaces : OrderedSet(Workspace) = OrderedSet{}][/comment]
[comment]			[for (aInitialNode : InitialNode | activity.ownedNode->filter(InitialNode))]
					[let aCollaborativeActivity : CollaborativeActivity = aCollaborativeActivityNode.collaborativeActivity]
						[generateCollaborativeActivity(aCollaborativeModel, aCollaborativeActivity, aCollaborativeActivityNode.outgoing)/]
					[/let]
			[/for][/comment]
			[for (aCollaborativeActivityNode : CollaborativeActivityNode | activity.ownedNode->filter(CollaborativeActivityNode))]
					[let aCollaborativeActivity : CollaborativeActivity = aCollaborativeActivityNode.collaborativeActivity]
						[generateCollaborativeActivity(aCollaborativeModel, aCollaborativeActivity, aCollaborativeActivityNode.outgoing)/]
					[/let]
			[/for]
[comment]		[/let][/comment]

		
	[/for]
[/template]
