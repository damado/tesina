[module generate_registry('http://cm/1.0')]
[import org::lifia::collaborativeTool::files::generate_registry_view /]
[import org::lifia::collaborativeTool::files::generate_registry_style /]

[**
 * Template used for the creation of registry component
 * @param aCollaborativeModel
 */]
[template public generateRegistry(aCollaborativeModel : CollaborativeModel)]

[file ('src/app/components/login/registry.component.ts', false, 'UTF-8')]
import { Component, TemplateRef, OnInit } from '@angular/core';
import { BsModalService } from 'ngx-bootstrap/modal';
import { BsModalRef } from 'ngx-bootstrap/modal/bs-modal-ref.service';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { AuthenticationService } from '../../services/authentication.service';

@Component({
  selector: 'app-registry',
  templateUrl: './registry.component.html',
  styleUrls: [ '[' /]'./registry.component.css'[ ']' /]
})
export class RegistryComponent implements OnInit {

	public modalRef: BsModalRef;
	public formLogin: FormGroup;

	constructor(private modalService: BsModalService, private autenticationService: AuthenticationService) {}

	ngOnInit() {
		this.formLogin = new FormGroup({
			username: new FormControl('', [ '[' /]Validators.required[ ']' /]),
			password: new FormControl('', [ '[' /]Validators.required[ ']' /]),
			role: new FormControl('', [ '[' /]Validators.required[ ']' /])
		})
	}

	/** Abre el modal para el registro. **/
	openModal(template: TemplateRef<any>) {
		this.modalRef = this.modalService.show(template, {class: 'modal-sm'});
	}

	/** Metodo llamado cuando se confirma los datos de registro. **/
	confirm(): void {
		this.autenticationService.register(this.formLogin.value);
		this.modalRef.hide();
	}

	/** Metodo llamado cuando se cancela el registro. **/
	decline(): void {
		this.modalRef.hide();
	}
}

[/file]

[generateRegistryView(aCollaborativeModel)/]

[generateRegistryStyle(aCollaborativeModel)/]

[/template]
